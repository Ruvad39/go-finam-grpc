// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: grpc/tradeapi/v1/assets/assets_service.proto

package assets_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetsService_Exchanges_FullMethodName    = "/grpc.tradeapi.v1.assets.AssetsService/Exchanges"
	AssetsService_Assets_FullMethodName       = "/grpc.tradeapi.v1.assets.AssetsService/Assets"
	AssetsService_OptionsChain_FullMethodName = "/grpc.tradeapi.v1.assets.AssetsService/OptionsChain"
	AssetsService_Schedule_FullMethodName     = "/grpc.tradeapi.v1.assets.AssetsService/Schedule"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис счетов
type AssetsServiceClient interface {
	// Получение списка доступных бирж, названия и mic коды
	// Пример HTTP запроса:
	// GET /v1/exchanges
	// Authorization: <token>
	Exchanges(ctx context.Context, in *ExchangesRequest, opts ...grpc.CallOption) (*ExchangesResponse, error)
	// Получение списка доступных инструментов, их описание
	// Пример HTTP запроса:
	// GET /v1/assets
	// Authorization: <token>
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error)
	// Получение цепочки опционов для базового актива
	// Пример HTTP запроса:
	// GET /v1/assets/SBER@MISX/options
	// Authorization: <token>
	OptionsChain(ctx context.Context, in *OptionsChainRequest, opts ...grpc.CallOption) (*OptionsChainResponse, error)
	// Получение расписания торгов для инструмента
	// Пример HTTP запроса:
	// GET /v1/assets/SBER@MISX/schedule
	// Authorization: <token>
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) Exchanges(ctx context.Context, in *ExchangesRequest, opts ...grpc.CallOption) (*ExchangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangesResponse)
	err := c.cc.Invoke(ctx, AssetsService_Exchanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetsResponse)
	err := c.cc.Invoke(ctx, AssetsService_Assets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) OptionsChain(ctx context.Context, in *OptionsChainRequest, opts ...grpc.CallOption) (*OptionsChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionsChainResponse)
	err := c.cc.Invoke(ctx, AssetsService_OptionsChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, AssetsService_Schedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility.
//
// Сервис счетов
type AssetsServiceServer interface {
	// Получение списка доступных бирж, названия и mic коды
	// Пример HTTP запроса:
	// GET /v1/exchanges
	// Authorization: <token>
	Exchanges(context.Context, *ExchangesRequest) (*ExchangesResponse, error)
	// Получение списка доступных инструментов, их описание
	// Пример HTTP запроса:
	// GET /v1/assets
	// Authorization: <token>
	Assets(context.Context, *AssetsRequest) (*AssetsResponse, error)
	// Получение цепочки опционов для базового актива
	// Пример HTTP запроса:
	// GET /v1/assets/SBER@MISX/options
	// Authorization: <token>
	OptionsChain(context.Context, *OptionsChainRequest) (*OptionsChainResponse, error)
	// Получение расписания торгов для инструмента
	// Пример HTTP запроса:
	// GET /v1/assets/SBER@MISX/schedule
	// Authorization: <token>
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetsServiceServer struct{}

func (UnimplementedAssetsServiceServer) Exchanges(context.Context, *ExchangesRequest) (*ExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchanges not implemented")
}
func (UnimplementedAssetsServiceServer) Assets(context.Context, *AssetsRequest) (*AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedAssetsServiceServer) OptionsChain(context.Context, *OptionsChainRequest) (*OptionsChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptionsChain not implemented")
}
func (UnimplementedAssetsServiceServer) Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}
func (UnimplementedAssetsServiceServer) testEmbeddedByValue()                       {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_Exchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).Exchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_Exchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).Exchanges(ctx, req.(*ExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_Assets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).Assets(ctx, req.(*AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_OptionsChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).OptionsChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_OptionsChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).OptionsChain(ctx, req.(*OptionsChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tradeapi.v1.assets.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchanges",
			Handler:    _AssetsService_Exchanges_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _AssetsService_Assets_Handler,
		},
		{
			MethodName: "OptionsChain",
			Handler:    _AssetsService_OptionsChain_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _AssetsService_Schedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tradeapi/v1/assets/assets_service.proto",
}
