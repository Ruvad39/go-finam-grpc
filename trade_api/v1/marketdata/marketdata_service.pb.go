// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: grpc/tradeapi/v1/marketdata/marketdata_service.proto

package marketdata_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	interval "google.golang.org/genproto/googleapis/type/interval"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Доступные таймфреймы для свечей
type BarsRequest_TimeFrame int32

const (
	// Таймфрейм не указан
	BarsRequest_TIME_FRAME_UNSPECIFIED BarsRequest_TimeFrame = 0
	// 1 минута
	BarsRequest_TIME_FRAME_M1 BarsRequest_TimeFrame = 1
	// 5 минут
	BarsRequest_TIME_FRAME_M5 BarsRequest_TimeFrame = 5
	// 15 минут
	BarsRequest_TIME_FRAME_M15 BarsRequest_TimeFrame = 9
	// 30 минут
	BarsRequest_TIME_FRAME_M30 BarsRequest_TimeFrame = 11
	// 1 час
	BarsRequest_TIME_FRAME_H1 BarsRequest_TimeFrame = 12
	// 2 часа
	BarsRequest_TIME_FRAME_H2 BarsRequest_TimeFrame = 13
	// 4 часа
	BarsRequest_TIME_FRAME_H4 BarsRequest_TimeFrame = 15
	// 8 часов
	BarsRequest_TIME_FRAME_H8 BarsRequest_TimeFrame = 17
	// День
	BarsRequest_TIME_FRAME_D BarsRequest_TimeFrame = 19
	// Неделя
	BarsRequest_TIME_FRAME_W BarsRequest_TimeFrame = 20
	// Месяц
	BarsRequest_TIME_FRAME_MN BarsRequest_TimeFrame = 21
	// Квартал
	BarsRequest_TIME_FRAME_QR BarsRequest_TimeFrame = 22
)

// Enum value maps for BarsRequest_TimeFrame.
var (
	BarsRequest_TimeFrame_name = map[int32]string{
		0:  "TIME_FRAME_UNSPECIFIED",
		1:  "TIME_FRAME_M1",
		5:  "TIME_FRAME_M5",
		9:  "TIME_FRAME_M15",
		11: "TIME_FRAME_M30",
		12: "TIME_FRAME_H1",
		13: "TIME_FRAME_H2",
		15: "TIME_FRAME_H4",
		17: "TIME_FRAME_H8",
		19: "TIME_FRAME_D",
		20: "TIME_FRAME_W",
		21: "TIME_FRAME_MN",
		22: "TIME_FRAME_QR",
	}
	BarsRequest_TimeFrame_value = map[string]int32{
		"TIME_FRAME_UNSPECIFIED": 0,
		"TIME_FRAME_M1":          1,
		"TIME_FRAME_M5":          5,
		"TIME_FRAME_M15":         9,
		"TIME_FRAME_M30":         11,
		"TIME_FRAME_H1":          12,
		"TIME_FRAME_H2":          13,
		"TIME_FRAME_H4":          15,
		"TIME_FRAME_H8":          17,
		"TIME_FRAME_D":           19,
		"TIME_FRAME_W":           20,
		"TIME_FRAME_MN":          21,
		"TIME_FRAME_QR":          22,
	}
)

func (x BarsRequest_TimeFrame) Enum() *BarsRequest_TimeFrame {
	p := new(BarsRequest_TimeFrame)
	*p = x
	return p
}

func (x BarsRequest_TimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarsRequest_TimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[0].Descriptor()
}

func (BarsRequest_TimeFrame) Type() protoreflect.EnumType {
	return &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[0]
}

func (x BarsRequest_TimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BarsRequest_TimeFrame.Descriptor instead.
func (BarsRequest_TimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{0, 0}
}

// Команда
type OrderBook_Row_Action int32

const (
	// Действие не указано
	OrderBook_Row_ACTION_UNSPECIFIED OrderBook_Row_Action = 0
	// Удалить
	OrderBook_Row_ACTION_REMOVE OrderBook_Row_Action = 1
	// Добавить
	OrderBook_Row_ACTION_ADD OrderBook_Row_Action = 2
	// Обновить
	OrderBook_Row_ACTION_UPDATE OrderBook_Row_Action = 3
)

// Enum value maps for OrderBook_Row_Action.
var (
	OrderBook_Row_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_REMOVE",
		2: "ACTION_ADD",
		3: "ACTION_UPDATE",
	}
	OrderBook_Row_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_REMOVE":      1,
		"ACTION_ADD":         2,
		"ACTION_UPDATE":      3,
	}
)

func (x OrderBook_Row_Action) Enum() *OrderBook_Row_Action {
	p := new(OrderBook_Row_Action)
	*p = x
	return p
}

func (x OrderBook_Row_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBook_Row_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[1].Descriptor()
}

func (OrderBook_Row_Action) Type() protoreflect.EnumType {
	return &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[1]
}

func (x OrderBook_Row_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBook_Row_Action.Descriptor instead.
func (OrderBook_Row_Action) EnumDescriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{14, 0, 0}
}

// Команда
type StreamOrderBook_Row_Action int32

const (
	// Действие не указано
	StreamOrderBook_Row_ACTION_UNSPECIFIED StreamOrderBook_Row_Action = 0
	// Удалить
	StreamOrderBook_Row_ACTION_REMOVE StreamOrderBook_Row_Action = 1
	// Добавить
	StreamOrderBook_Row_ACTION_ADD StreamOrderBook_Row_Action = 2
	// Обновить
	StreamOrderBook_Row_ACTION_UPDATE StreamOrderBook_Row_Action = 3
)

// Enum value maps for StreamOrderBook_Row_Action.
var (
	StreamOrderBook_Row_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_REMOVE",
		2: "ACTION_ADD",
		3: "ACTION_UPDATE",
	}
	StreamOrderBook_Row_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_REMOVE":      1,
		"ACTION_ADD":         2,
		"ACTION_UPDATE":      3,
	}
)

func (x StreamOrderBook_Row_Action) Enum() *StreamOrderBook_Row_Action {
	p := new(StreamOrderBook_Row_Action)
	*p = x
	return p
}

func (x StreamOrderBook_Row_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamOrderBook_Row_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[2].Descriptor()
}

func (StreamOrderBook_Row_Action) Type() protoreflect.EnumType {
	return &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes[2]
}

func (x StreamOrderBook_Row_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamOrderBook_Row_Action.Descriptor instead.
func (StreamOrderBook_Row_Action) EnumDescriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{17, 0, 0}
}

// Запрос получения исторических данных по инструменту (агрегированные свечи)
type BarsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Необходимый таймфрейм
	Timeframe BarsRequest_TimeFrame `protobuf:"varint,2,opt,name=timeframe,proto3,enum=grpc.tradeapi.v1.marketdata.BarsRequest_TimeFrame" json:"timeframe,omitempty"`
	// Начало и окончание запрашиваемого периода
	Interval      *interval.Interval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarsRequest) Reset() {
	*x = BarsRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarsRequest) ProtoMessage() {}

func (x *BarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarsRequest.ProtoReflect.Descriptor instead.
func (*BarsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{0}
}

func (x *BarsRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BarsRequest) GetTimeframe() BarsRequest_TimeFrame {
	if x != nil {
		return x.Timeframe
	}
	return BarsRequest_TIME_FRAME_UNSPECIFIED
}

func (x *BarsRequest) GetInterval() *interval.Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// Список агрегированных свеч
type BarsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Агрегированная свеча
	Bars          []*Bar `protobuf:"bytes,2,rep,name=bars,proto3" json:"bars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarsResponse) Reset() {
	*x = BarsResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarsResponse) ProtoMessage() {}

func (x *BarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarsResponse.ProtoReflect.Descriptor instead.
func (*BarsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{1}
}

func (x *BarsResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BarsResponse) GetBars() []*Bar {
	if x != nil {
		return x.Bars
	}
	return nil
}

// Запрос получения последней котировки по инструменту
type QuoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol        string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteRequest) Reset() {
	*x = QuoteRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequest) ProtoMessage() {}

func (x *QuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequest.ProtoReflect.Descriptor instead.
func (*QuoteRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{2}
}

func (x *QuoteRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Последняя котировка по инструменту
type QuoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Цена последней сделки
	Quote         *Quote `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteResponse) Reset() {
	*x = QuoteResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteResponse) ProtoMessage() {}

func (x *QuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteResponse.ProtoReflect.Descriptor instead.
func (*QuoteResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{3}
}

func (x *QuoteResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteResponse) GetQuote() *Quote {
	if x != nil {
		return x.Quote
	}
	return nil
}

// Запрос получения текущего стакана по инструменту
type OrderBookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol        string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookRequest) Reset() {
	*x = OrderBookRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookRequest) ProtoMessage() {}

func (x *OrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookRequest.ProtoReflect.Descriptor instead.
func (*OrderBookRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{4}
}

func (x *OrderBookRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Текущий стакан по инструменту
type OrderBookResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Стакан
	Orderbook     *OrderBook `protobuf:"bytes,2,opt,name=orderbook,proto3" json:"orderbook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookResponse) Reset() {
	*x = OrderBookResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookResponse) ProtoMessage() {}

func (x *OrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookResponse.ProtoReflect.Descriptor instead.
func (*OrderBookResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{5}
}

func (x *OrderBookResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderBookResponse) GetOrderbook() *OrderBook {
	if x != nil {
		return x.Orderbook
	}
	return nil
}

// Запрос списка последних сделок по инструменту
type LatestTradesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol        string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestTradesRequest) Reset() {
	*x = LatestTradesRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTradesRequest) ProtoMessage() {}

func (x *LatestTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTradesRequest.ProtoReflect.Descriptor instead.
func (*LatestTradesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{6}
}

func (x *LatestTradesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Список последних сделок по инструменту
type LatestTradesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Список последних сделок
	Trades        []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestTradesResponse) Reset() {
	*x = LatestTradesResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTradesResponse) ProtoMessage() {}

func (x *LatestTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTradesResponse.ProtoReflect.Descriptor instead.
func (*LatestTradesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{7}
}

func (x *LatestTradesResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *LatestTradesResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Запрос подписки на котировки по инструменту. Стрим
type SubscribeQuoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список символов инструментов
	Symbols       []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeQuoteRequest) Reset() {
	*x = SubscribeQuoteRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQuoteRequest) ProtoMessage() {}

func (x *SubscribeQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQuoteRequest.ProtoReflect.Descriptor instead.
func (*SubscribeQuoteRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeQuoteRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// Котировки по инструменту. Стрим
type SubscribeQuoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список котировок
	Quote []*Quote `protobuf:"bytes,1,rep,name=quote,proto3" json:"quote,omitempty"`
	// Ошибка стрим сервиса
	Error         *StreamError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeQuoteResponse) Reset() {
	*x = SubscribeQuoteResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeQuoteResponse) ProtoMessage() {}

func (x *SubscribeQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeQuoteResponse.ProtoReflect.Descriptor instead.
func (*SubscribeQuoteResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeQuoteResponse) GetQuote() []*Quote {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *SubscribeQuoteResponse) GetError() *StreamError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Запрос подписки на стакан по инструменту. Стрим
type SubscribeOrderBookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol        string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeOrderBookRequest) Reset() {
	*x = SubscribeOrderBookRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookRequest) ProtoMessage() {}

func (x *SubscribeOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeOrderBookRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Стакан по инструменту. Стрим
type SubscribeOrderBookResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список стакан стримов
	OrderBook     []*StreamOrderBook `protobuf:"bytes,1,rep,name=order_book,json=orderBook,proto3" json:"order_book,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeOrderBookResponse) Reset() {
	*x = SubscribeOrderBookResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookResponse) ProtoMessage() {}

func (x *SubscribeOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookResponse.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeOrderBookResponse) GetOrderBook() []*StreamOrderBook {
	if x != nil {
		return x.OrderBook
	}
	return nil
}

// Информация об агрегированной свече
type Bar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Метка времени
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Цена открытия свечи
	Open *decimal.Decimal `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	// Максимальная цена свечи
	High *decimal.Decimal `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	// Минимальная цена свечи
	Low *decimal.Decimal `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// Цена закрытия свечи
	Close *decimal.Decimal `protobuf:"bytes,5,opt,name=close,proto3" json:"close,omitempty"`
	// Объём торгов за свечу
	Volume        *decimal.Decimal `protobuf:"bytes,6,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bar) Reset() {
	*x = Bar{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{12}
}

func (x *Bar) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Bar) GetOpen() *decimal.Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Bar) GetHigh() *decimal.Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bar) GetLow() *decimal.Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bar) GetClose() *decimal.Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Bar) GetVolume() *decimal.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

// Информация о котировке
type Quote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Метка времени
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Аск. 0 при отсутствии активного аска
	Ask *decimal.Decimal `protobuf:"bytes,3,opt,name=ask,proto3" json:"ask,omitempty"`
	// Размер аска
	AskSize *decimal.Decimal `protobuf:"bytes,4,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	// Бид. 0 при отсутствии активного бида
	Bid *decimal.Decimal `protobuf:"bytes,5,opt,name=bid,proto3" json:"bid,omitempty"`
	// Размер бида
	BidSize *decimal.Decimal `protobuf:"bytes,6,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	// Цена последней сделки
	Last *decimal.Decimal `protobuf:"bytes,7,opt,name=last,proto3" json:"last,omitempty"`
	// Размер последней сделки
	LastSize *decimal.Decimal `protobuf:"bytes,8,opt,name=last_size,json=lastSize,proto3" json:"last_size,omitempty"`
	// Дневной объем сделок
	Volume *decimal.Decimal `protobuf:"bytes,9,opt,name=volume,proto3" json:"volume,omitempty"`
	// Дневной оборот сделок
	Turnover *decimal.Decimal `protobuf:"bytes,10,opt,name=turnover,proto3" json:"turnover,omitempty"`
	// Цена открытия. Дневная
	Open *decimal.Decimal `protobuf:"bytes,11,opt,name=open,proto3" json:"open,omitempty"`
	// Максимальная цена. Дневная
	High *decimal.Decimal `protobuf:"bytes,12,opt,name=high,proto3" json:"high,omitempty"`
	// Минимальная цена. Дневная
	Low *decimal.Decimal `protobuf:"bytes,13,opt,name=low,proto3" json:"low,omitempty"`
	// Цена закрытия. Дневная
	Close *decimal.Decimal `protobuf:"bytes,14,opt,name=close,proto3" json:"close,omitempty"`
	// Изменение цены (last минус close)
	Change *decimal.Decimal `protobuf:"bytes,15,opt,name=change,proto3" json:"change,omitempty"`
	// Types that are valid to be assigned to Additions:
	//
	//	*Quote_Option_
	Additions     isQuote_Additions `protobuf_oneof:"additions"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quote) Reset() {
	*x = Quote{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{13}
}

func (x *Quote) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Quote) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Quote) GetAsk() *decimal.Decimal {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *Quote) GetAskSize() *decimal.Decimal {
	if x != nil {
		return x.AskSize
	}
	return nil
}

func (x *Quote) GetBid() *decimal.Decimal {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *Quote) GetBidSize() *decimal.Decimal {
	if x != nil {
		return x.BidSize
	}
	return nil
}

func (x *Quote) GetLast() *decimal.Decimal {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *Quote) GetLastSize() *decimal.Decimal {
	if x != nil {
		return x.LastSize
	}
	return nil
}

func (x *Quote) GetVolume() *decimal.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Quote) GetTurnover() *decimal.Decimal {
	if x != nil {
		return x.Turnover
	}
	return nil
}

func (x *Quote) GetOpen() *decimal.Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Quote) GetHigh() *decimal.Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Quote) GetLow() *decimal.Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Quote) GetClose() *decimal.Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Quote) GetChange() *decimal.Decimal {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Quote) GetAdditions() isQuote_Additions {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *Quote) GetOption() *Quote_Option {
	if x != nil {
		if x, ok := x.Additions.(*Quote_Option_); ok {
			return x.Option
		}
	}
	return nil
}

type isQuote_Additions interface {
	isQuote_Additions()
}

type Quote_Option_ struct {
	// Информация об опционе
	Option *Quote_Option `protobuf:"bytes,50,opt,name=option,proto3,oneof"`
}

func (*Quote_Option_) isQuote_Additions() {}

// Информация о стакане
type OrderBook struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уровни стакана
	Rows          []*OrderBook_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{14}
}

func (x *OrderBook) GetRows() []*OrderBook_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// Информация о сделке
type Trade struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор сделки, отправленный биржей
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// Идентификатор участника рынка
	Mpid string `protobuf:"bytes,2,opt,name=mpid,proto3" json:"mpid,omitempty"`
	// Метка времени
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Цена сделки
	Price *decimal.Decimal `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Размер сделки
	Size          *decimal.Decimal `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{15}
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetMpid() string {
	if x != nil {
		return x.Mpid
	}
	return ""
}

func (x *Trade) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Trade) GetPrice() *decimal.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Trade) GetSize() *decimal.Decimal {
	if x != nil {
		return x.Size
	}
	return nil
}

// Ошибка стрим сервиса
type StreamError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Код ошибки
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Описание ошибки
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{16}
}

func (x *StreamError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StreamError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Стакан по инструменту. Стрим
type StreamOrderBook struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Уровни стакана
	Rows          []*StreamOrderBook_Row `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOrderBook) Reset() {
	*x = StreamOrderBook{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderBook) ProtoMessage() {}

func (x *StreamOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderBook.ProtoReflect.Descriptor instead.
func (*StreamOrderBook) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{17}
}

func (x *StreamOrderBook) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StreamOrderBook) GetRows() []*StreamOrderBook_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// Запрос списка последних сделок по инструменту. Стрим
type SubscribeLatestTradesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol        string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeLatestTradesRequest) Reset() {
	*x = SubscribeLatestTradesRequest{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLatestTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLatestTradesRequest) ProtoMessage() {}

func (x *SubscribeLatestTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLatestTradesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLatestTradesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{18}
}

func (x *SubscribeLatestTradesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// Список последних сделок по инструменту. Стрим
type SubscribeLatestTradesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Список сделок
	Trades        []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeLatestTradesResponse) Reset() {
	*x = SubscribeLatestTradesResponse{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLatestTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLatestTradesResponse) ProtoMessage() {}

func (x *SubscribeLatestTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLatestTradesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeLatestTradesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeLatestTradesResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscribeLatestTradesResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Информация об опционе
type Quote_Option struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Открытый интерес
	OpenInterest *decimal.Decimal `protobuf:"bytes,1,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	// Implied volatility
	ImpliedVolatility *decimal.Decimal `protobuf:"bytes,2,opt,name=implied_volatility,json=impliedVolatility,proto3" json:"implied_volatility,omitempty"`
	// Теоретическая цена
	TheoreticalPrice *decimal.Decimal `protobuf:"bytes,3,opt,name=theoretical_price,json=theoreticalPrice,proto3" json:"theoretical_price,omitempty"`
	// Delta
	Delta *decimal.Decimal `protobuf:"bytes,4,opt,name=delta,proto3" json:"delta,omitempty"`
	// Gamma
	Gamma *decimal.Decimal `protobuf:"bytes,5,opt,name=gamma,proto3" json:"gamma,omitempty"`
	// Theta
	Theta *decimal.Decimal `protobuf:"bytes,6,opt,name=theta,proto3" json:"theta,omitempty"`
	// Vega
	Vega *decimal.Decimal `protobuf:"bytes,7,opt,name=vega,proto3" json:"vega,omitempty"`
	// Rho
	Rho           *decimal.Decimal `protobuf:"bytes,8,opt,name=rho,proto3" json:"rho,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quote_Option) Reset() {
	*x = Quote_Option{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quote_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote_Option) ProtoMessage() {}

func (x *Quote_Option) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote_Option.ProtoReflect.Descriptor instead.
func (*Quote_Option) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Quote_Option) GetOpenInterest() *decimal.Decimal {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

func (x *Quote_Option) GetImpliedVolatility() *decimal.Decimal {
	if x != nil {
		return x.ImpliedVolatility
	}
	return nil
}

func (x *Quote_Option) GetTheoreticalPrice() *decimal.Decimal {
	if x != nil {
		return x.TheoreticalPrice
	}
	return nil
}

func (x *Quote_Option) GetDelta() *decimal.Decimal {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Quote_Option) GetGamma() *decimal.Decimal {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *Quote_Option) GetTheta() *decimal.Decimal {
	if x != nil {
		return x.Theta
	}
	return nil
}

func (x *Quote_Option) GetVega() *decimal.Decimal {
	if x != nil {
		return x.Vega
	}
	return nil
}

func (x *Quote_Option) GetRho() *decimal.Decimal {
	if x != nil {
		return x.Rho
	}
	return nil
}

// Информация об уровне в стакане (строке)
type OrderBook_Row struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Цена
	Price *decimal.Decimal `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// Types that are valid to be assigned to Side:
	//
	//	*OrderBook_Row_SellSize
	//	*OrderBook_Row_BuySize
	Side isOrderBook_Row_Side `protobuf_oneof:"side"`
	// Команда
	Action OrderBook_Row_Action `protobuf:"varint,4,opt,name=action,proto3,enum=grpc.tradeapi.v1.marketdata.OrderBook_Row_Action" json:"action,omitempty"`
	// Идентификатор участника рынка
	Mpid string `protobuf:"bytes,5,opt,name=mpid,proto3" json:"mpid,omitempty"`
	// Метка времени
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook_Row) Reset() {
	*x = OrderBook_Row{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook_Row) ProtoMessage() {}

func (x *OrderBook_Row) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook_Row.ProtoReflect.Descriptor instead.
func (*OrderBook_Row) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *OrderBook_Row) GetPrice() *decimal.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderBook_Row) GetSide() isOrderBook_Row_Side {
	if x != nil {
		return x.Side
	}
	return nil
}

func (x *OrderBook_Row) GetSellSize() *decimal.Decimal {
	if x != nil {
		if x, ok := x.Side.(*OrderBook_Row_SellSize); ok {
			return x.SellSize
		}
	}
	return nil
}

func (x *OrderBook_Row) GetBuySize() *decimal.Decimal {
	if x != nil {
		if x, ok := x.Side.(*OrderBook_Row_BuySize); ok {
			return x.BuySize
		}
	}
	return nil
}

func (x *OrderBook_Row) GetAction() OrderBook_Row_Action {
	if x != nil {
		return x.Action
	}
	return OrderBook_Row_ACTION_UNSPECIFIED
}

func (x *OrderBook_Row) GetMpid() string {
	if x != nil {
		return x.Mpid
	}
	return ""
}

func (x *OrderBook_Row) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isOrderBook_Row_Side interface {
	isOrderBook_Row_Side()
}

type OrderBook_Row_SellSize struct {
	// Размер на продажу
	SellSize *decimal.Decimal `protobuf:"bytes,2,opt,name=sell_size,json=sellSize,proto3,oneof"`
}

type OrderBook_Row_BuySize struct {
	// Размер на покупку
	BuySize *decimal.Decimal `protobuf:"bytes,3,opt,name=buy_size,json=buySize,proto3,oneof"`
}

func (*OrderBook_Row_SellSize) isOrderBook_Row_Side() {}

func (*OrderBook_Row_BuySize) isOrderBook_Row_Side() {}

// Информация об уровне в стакане (строке)
type StreamOrderBook_Row struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Цена
	Price *decimal.Decimal `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// Types that are valid to be assigned to Side:
	//
	//	*StreamOrderBook_Row_SellSize
	//	*StreamOrderBook_Row_BuySize
	Side isStreamOrderBook_Row_Side `protobuf_oneof:"side"`
	// Команда
	Action StreamOrderBook_Row_Action `protobuf:"varint,4,opt,name=action,proto3,enum=grpc.tradeapi.v1.marketdata.StreamOrderBook_Row_Action" json:"action,omitempty"`
	// Идентификатор участника рынка
	Mpid string `protobuf:"bytes,5,opt,name=mpid,proto3" json:"mpid,omitempty"`
	// Метка времени
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOrderBook_Row) Reset() {
	*x = StreamOrderBook_Row{}
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOrderBook_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderBook_Row) ProtoMessage() {}

func (x *StreamOrderBook_Row) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderBook_Row.ProtoReflect.Descriptor instead.
func (*StreamOrderBook_Row) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *StreamOrderBook_Row) GetPrice() *decimal.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *StreamOrderBook_Row) GetSide() isStreamOrderBook_Row_Side {
	if x != nil {
		return x.Side
	}
	return nil
}

func (x *StreamOrderBook_Row) GetSellSize() *decimal.Decimal {
	if x != nil {
		if x, ok := x.Side.(*StreamOrderBook_Row_SellSize); ok {
			return x.SellSize
		}
	}
	return nil
}

func (x *StreamOrderBook_Row) GetBuySize() *decimal.Decimal {
	if x != nil {
		if x, ok := x.Side.(*StreamOrderBook_Row_BuySize); ok {
			return x.BuySize
		}
	}
	return nil
}

func (x *StreamOrderBook_Row) GetAction() StreamOrderBook_Row_Action {
	if x != nil {
		return x.Action
	}
	return StreamOrderBook_Row_ACTION_UNSPECIFIED
}

func (x *StreamOrderBook_Row) GetMpid() string {
	if x != nil {
		return x.Mpid
	}
	return ""
}

func (x *StreamOrderBook_Row) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isStreamOrderBook_Row_Side interface {
	isStreamOrderBook_Row_Side()
}

type StreamOrderBook_Row_SellSize struct {
	// Размер на продажу
	SellSize *decimal.Decimal `protobuf:"bytes,2,opt,name=sell_size,json=sellSize,proto3,oneof"`
}

type StreamOrderBook_Row_BuySize struct {
	// Размер на покупку
	BuySize *decimal.Decimal `protobuf:"bytes,3,opt,name=buy_size,json=buySize,proto3,oneof"`
}

func (*StreamOrderBook_Row_SellSize) isStreamOrderBook_Row_Side() {}

func (*StreamOrderBook_Row_BuySize) isStreamOrderBook_Row_Side() {}

var File_grpc_tradeapi_v1_marketdata_marketdata_service_proto protoreflect.FileDescriptor

const file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDesc = "" +
	"\n" +
	"4grpc/tradeapi/v1/marketdata/marketdata_service.proto\x12\x1bgrpc.tradeapi.v1.marketdata\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/type/decimal.proto\x1a\x1agoogle/type/interval.proto\"\xb8\x03\n" +
	"\vBarsRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12P\n" +
	"\ttimeframe\x18\x02 \x01(\x0e22.grpc.tradeapi.v1.marketdata.BarsRequest.TimeFrameR\ttimeframe\x121\n" +
	"\binterval\x18\x03 \x01(\v2\x15.google.type.IntervalR\binterval\"\x8b\x02\n" +
	"\tTimeFrame\x12\x1a\n" +
	"\x16TIME_FRAME_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rTIME_FRAME_M1\x10\x01\x12\x11\n" +
	"\rTIME_FRAME_M5\x10\x05\x12\x12\n" +
	"\x0eTIME_FRAME_M15\x10\t\x12\x12\n" +
	"\x0eTIME_FRAME_M30\x10\v\x12\x11\n" +
	"\rTIME_FRAME_H1\x10\f\x12\x11\n" +
	"\rTIME_FRAME_H2\x10\r\x12\x11\n" +
	"\rTIME_FRAME_H4\x10\x0f\x12\x11\n" +
	"\rTIME_FRAME_H8\x10\x11\x12\x10\n" +
	"\fTIME_FRAME_D\x10\x13\x12\x10\n" +
	"\fTIME_FRAME_W\x10\x14\x12\x11\n" +
	"\rTIME_FRAME_MN\x10\x15\x12\x11\n" +
	"\rTIME_FRAME_QR\x10\x16\"\\\n" +
	"\fBarsResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x124\n" +
	"\x04bars\x18\x02 \x03(\v2 .grpc.tradeapi.v1.marketdata.BarR\x04bars\"&\n" +
	"\fQuoteRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"a\n" +
	"\rQuoteResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x128\n" +
	"\x05quote\x18\x02 \x01(\v2\".grpc.tradeapi.v1.marketdata.QuoteR\x05quote\"*\n" +
	"\x10OrderBookRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"q\n" +
	"\x11OrderBookResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12D\n" +
	"\torderbook\x18\x02 \x01(\v2&.grpc.tradeapi.v1.marketdata.OrderBookR\torderbook\"-\n" +
	"\x13LatestTradesRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"j\n" +
	"\x14LatestTradesResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12:\n" +
	"\x06trades\x18\x02 \x03(\v2\".grpc.tradeapi.v1.marketdata.TradeR\x06trades\"1\n" +
	"\x15SubscribeQuoteRequest\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\"\x92\x01\n" +
	"\x16SubscribeQuoteResponse\x128\n" +
	"\x05quote\x18\x01 \x03(\v2\".grpc.tradeapi.v1.marketdata.QuoteR\x05quote\x12>\n" +
	"\x05error\x18\x02 \x01(\v2(.grpc.tradeapi.v1.marketdata.StreamErrorR\x05error\"3\n" +
	"\x19SubscribeOrderBookRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"i\n" +
	"\x1aSubscribeOrderBookResponse\x12K\n" +
	"\n" +
	"order_book\x18\x01 \x03(\v2,.grpc.tradeapi.v1.marketdata.StreamOrderBookR\torderBook\"\x95\x02\n" +
	"\x03Bar\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12(\n" +
	"\x04open\x18\x02 \x01(\v2\x14.google.type.DecimalR\x04open\x12(\n" +
	"\x04high\x18\x03 \x01(\v2\x14.google.type.DecimalR\x04high\x12&\n" +
	"\x03low\x18\x04 \x01(\v2\x14.google.type.DecimalR\x03low\x12*\n" +
	"\x05close\x18\x05 \x01(\v2\x14.google.type.DecimalR\x05close\x12,\n" +
	"\x06volume\x18\x06 \x01(\v2\x14.google.type.DecimalR\x06volume\"\x94\t\n" +
	"\x05Quote\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12&\n" +
	"\x03ask\x18\x03 \x01(\v2\x14.google.type.DecimalR\x03ask\x12/\n" +
	"\bask_size\x18\x04 \x01(\v2\x14.google.type.DecimalR\aaskSize\x12&\n" +
	"\x03bid\x18\x05 \x01(\v2\x14.google.type.DecimalR\x03bid\x12/\n" +
	"\bbid_size\x18\x06 \x01(\v2\x14.google.type.DecimalR\abidSize\x12(\n" +
	"\x04last\x18\a \x01(\v2\x14.google.type.DecimalR\x04last\x121\n" +
	"\tlast_size\x18\b \x01(\v2\x14.google.type.DecimalR\blastSize\x12,\n" +
	"\x06volume\x18\t \x01(\v2\x14.google.type.DecimalR\x06volume\x120\n" +
	"\bturnover\x18\n" +
	" \x01(\v2\x14.google.type.DecimalR\bturnover\x12(\n" +
	"\x04open\x18\v \x01(\v2\x14.google.type.DecimalR\x04open\x12(\n" +
	"\x04high\x18\f \x01(\v2\x14.google.type.DecimalR\x04high\x12&\n" +
	"\x03low\x18\r \x01(\v2\x14.google.type.DecimalR\x03low\x12*\n" +
	"\x05close\x18\x0e \x01(\v2\x14.google.type.DecimalR\x05close\x12,\n" +
	"\x06change\x18\x0f \x01(\v2\x14.google.type.DecimalR\x06change\x12C\n" +
	"\x06option\x182 \x01(\v2).grpc.tradeapi.v1.marketdata.Quote.OptionH\x00R\x06option\x1a\xa1\x03\n" +
	"\x06Option\x129\n" +
	"\ropen_interest\x18\x01 \x01(\v2\x14.google.type.DecimalR\fopenInterest\x12C\n" +
	"\x12implied_volatility\x18\x02 \x01(\v2\x14.google.type.DecimalR\x11impliedVolatility\x12A\n" +
	"\x11theoretical_price\x18\x03 \x01(\v2\x14.google.type.DecimalR\x10theoreticalPrice\x12*\n" +
	"\x05delta\x18\x04 \x01(\v2\x14.google.type.DecimalR\x05delta\x12*\n" +
	"\x05gamma\x18\x05 \x01(\v2\x14.google.type.DecimalR\x05gamma\x12*\n" +
	"\x05theta\x18\x06 \x01(\v2\x14.google.type.DecimalR\x05theta\x12(\n" +
	"\x04vega\x18\a \x01(\v2\x14.google.type.DecimalR\x04vega\x12&\n" +
	"\x03rho\x18\b \x01(\v2\x14.google.type.DecimalR\x03rhoB\v\n" +
	"\tadditions\"\xe0\x03\n" +
	"\tOrderBook\x12>\n" +
	"\x04rows\x18\x01 \x03(\v2*.grpc.tradeapi.v1.marketdata.OrderBook.RowR\x04rows\x1a\x92\x03\n" +
	"\x03Row\x12*\n" +
	"\x05price\x18\x01 \x01(\v2\x14.google.type.DecimalR\x05price\x123\n" +
	"\tsell_size\x18\x02 \x01(\v2\x14.google.type.DecimalH\x00R\bsellSize\x121\n" +
	"\bbuy_size\x18\x03 \x01(\v2\x14.google.type.DecimalH\x00R\abuySize\x12I\n" +
	"\x06action\x18\x04 \x01(\x0e21.grpc.tradeapi.v1.marketdata.OrderBook.Row.ActionR\x06action\x12\x12\n" +
	"\x04mpid\x18\x05 \x01(\tR\x04mpid\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"V\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rACTION_REMOVE\x10\x01\x12\x0e\n" +
	"\n" +
	"ACTION_ADD\x10\x02\x12\x11\n" +
	"\rACTION_UPDATE\x10\x03B\x06\n" +
	"\x04side\"\xc6\x01\n" +
	"\x05Trade\x12\x19\n" +
	"\btrade_id\x18\x01 \x01(\tR\atradeId\x12\x12\n" +
	"\x04mpid\x18\x02 \x01(\tR\x04mpid\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12*\n" +
	"\x05price\x18\x04 \x01(\v2\x14.google.type.DecimalR\x05price\x12(\n" +
	"\x04size\x18\x05 \x01(\v2\x14.google.type.DecimalR\x04size\"C\n" +
	"\vStreamError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"\x8a\x04\n" +
	"\x0fStreamOrderBook\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12D\n" +
	"\x04rows\x18\x02 \x03(\v20.grpc.tradeapi.v1.marketdata.StreamOrderBook.RowR\x04rows\x1a\x98\x03\n" +
	"\x03Row\x12*\n" +
	"\x05price\x18\x01 \x01(\v2\x14.google.type.DecimalR\x05price\x123\n" +
	"\tsell_size\x18\x02 \x01(\v2\x14.google.type.DecimalH\x00R\bsellSize\x121\n" +
	"\bbuy_size\x18\x03 \x01(\v2\x14.google.type.DecimalH\x00R\abuySize\x12O\n" +
	"\x06action\x18\x04 \x01(\x0e27.grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.ActionR\x06action\x12\x12\n" +
	"\x04mpid\x18\x05 \x01(\tR\x04mpid\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"V\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rACTION_REMOVE\x10\x01\x12\x0e\n" +
	"\n" +
	"ACTION_ADD\x10\x02\x12\x11\n" +
	"\rACTION_UPDATE\x10\x03B\x06\n" +
	"\x04side\"6\n" +
	"\x1cSubscribeLatestTradesRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\"s\n" +
	"\x1dSubscribeLatestTradesResponse\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12:\n" +
	"\x06trades\x18\x02 \x03(\v2\".grpc.tradeapi.v1.marketdata.TradeR\x06trades2\x86\b\n" +
	"\x11MarketDataService\x12\x82\x01\n" +
	"\x04Bars\x12(.grpc.tradeapi.v1.marketdata.BarsRequest\x1a).grpc.tradeapi.v1.marketdata.BarsResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/instruments/{symbol}/bars\x12\x92\x01\n" +
	"\tLastQuote\x12).grpc.tradeapi.v1.marketdata.QuoteRequest\x1a*.grpc.tradeapi.v1.marketdata.QuoteResponse\".\x82\xd3\xe4\x93\x02(\x12&/v1/instruments/{symbol}/quotes/latest\x12\x96\x01\n" +
	"\tOrderBook\x12-.grpc.tradeapi.v1.marketdata.OrderBookRequest\x1a..grpc.tradeapi.v1.marketdata.OrderBookResponse\"*\x82\xd3\xe4\x93\x02$\x12\"/v1/instruments/{symbol}/orderbook\x12\xa3\x01\n" +
	"\fLatestTrades\x120.grpc.tradeapi.v1.marketdata.LatestTradesRequest\x1a1.grpc.tradeapi.v1.marketdata.LatestTradesResponse\".\x82\xd3\xe4\x93\x02(\x12&/v1/instruments/{symbol}/trades/latest\x12{\n" +
	"\x0eSubscribeQuote\x122.grpc.tradeapi.v1.marketdata.SubscribeQuoteRequest\x1a3.grpc.tradeapi.v1.marketdata.SubscribeQuoteResponse0\x01\x12\x87\x01\n" +
	"\x12SubscribeOrderBook\x126.grpc.tradeapi.v1.marketdata.SubscribeOrderBookRequest\x1a7.grpc.tradeapi.v1.marketdata.SubscribeOrderBookResponse0\x01\x12\x90\x01\n" +
	"\x15SubscribeLatestTrades\x129.grpc.tradeapi.v1.marketdata.SubscribeLatestTradesRequest\x1a:.grpc.tradeapi.v1.marketdata.SubscribeLatestTradesResponse0\x01B.P\x01Z*trade_api/v1/marketdata/marketdata_serviceb\x06proto3"

var (
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescOnce sync.Once
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescData []byte
)

func file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescGZIP() []byte {
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescOnce.Do(func() {
		file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDesc), len(file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDesc)))
	})
	return file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDescData
}

var file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_goTypes = []any{
	(BarsRequest_TimeFrame)(0),            // 0: grpc.tradeapi.v1.marketdata.BarsRequest.TimeFrame
	(OrderBook_Row_Action)(0),             // 1: grpc.tradeapi.v1.marketdata.OrderBook.Row.Action
	(StreamOrderBook_Row_Action)(0),       // 2: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.Action
	(*BarsRequest)(nil),                   // 3: grpc.tradeapi.v1.marketdata.BarsRequest
	(*BarsResponse)(nil),                  // 4: grpc.tradeapi.v1.marketdata.BarsResponse
	(*QuoteRequest)(nil),                  // 5: grpc.tradeapi.v1.marketdata.QuoteRequest
	(*QuoteResponse)(nil),                 // 6: grpc.tradeapi.v1.marketdata.QuoteResponse
	(*OrderBookRequest)(nil),              // 7: grpc.tradeapi.v1.marketdata.OrderBookRequest
	(*OrderBookResponse)(nil),             // 8: grpc.tradeapi.v1.marketdata.OrderBookResponse
	(*LatestTradesRequest)(nil),           // 9: grpc.tradeapi.v1.marketdata.LatestTradesRequest
	(*LatestTradesResponse)(nil),          // 10: grpc.tradeapi.v1.marketdata.LatestTradesResponse
	(*SubscribeQuoteRequest)(nil),         // 11: grpc.tradeapi.v1.marketdata.SubscribeQuoteRequest
	(*SubscribeQuoteResponse)(nil),        // 12: grpc.tradeapi.v1.marketdata.SubscribeQuoteResponse
	(*SubscribeOrderBookRequest)(nil),     // 13: grpc.tradeapi.v1.marketdata.SubscribeOrderBookRequest
	(*SubscribeOrderBookResponse)(nil),    // 14: grpc.tradeapi.v1.marketdata.SubscribeOrderBookResponse
	(*Bar)(nil),                           // 15: grpc.tradeapi.v1.marketdata.Bar
	(*Quote)(nil),                         // 16: grpc.tradeapi.v1.marketdata.Quote
	(*OrderBook)(nil),                     // 17: grpc.tradeapi.v1.marketdata.OrderBook
	(*Trade)(nil),                         // 18: grpc.tradeapi.v1.marketdata.Trade
	(*StreamError)(nil),                   // 19: grpc.tradeapi.v1.marketdata.StreamError
	(*StreamOrderBook)(nil),               // 20: grpc.tradeapi.v1.marketdata.StreamOrderBook
	(*SubscribeLatestTradesRequest)(nil),  // 21: grpc.tradeapi.v1.marketdata.SubscribeLatestTradesRequest
	(*SubscribeLatestTradesResponse)(nil), // 22: grpc.tradeapi.v1.marketdata.SubscribeLatestTradesResponse
	(*Quote_Option)(nil),                  // 23: grpc.tradeapi.v1.marketdata.Quote.Option
	(*OrderBook_Row)(nil),                 // 24: grpc.tradeapi.v1.marketdata.OrderBook.Row
	(*StreamOrderBook_Row)(nil),           // 25: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row
	(*interval.Interval)(nil),             // 26: google.type.Interval
	(*timestamppb.Timestamp)(nil),         // 27: google.protobuf.Timestamp
	(*decimal.Decimal)(nil),               // 28: google.type.Decimal
}
var file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_depIdxs = []int32{
	0,  // 0: grpc.tradeapi.v1.marketdata.BarsRequest.timeframe:type_name -> grpc.tradeapi.v1.marketdata.BarsRequest.TimeFrame
	26, // 1: grpc.tradeapi.v1.marketdata.BarsRequest.interval:type_name -> google.type.Interval
	15, // 2: grpc.tradeapi.v1.marketdata.BarsResponse.bars:type_name -> grpc.tradeapi.v1.marketdata.Bar
	16, // 3: grpc.tradeapi.v1.marketdata.QuoteResponse.quote:type_name -> grpc.tradeapi.v1.marketdata.Quote
	17, // 4: grpc.tradeapi.v1.marketdata.OrderBookResponse.orderbook:type_name -> grpc.tradeapi.v1.marketdata.OrderBook
	18, // 5: grpc.tradeapi.v1.marketdata.LatestTradesResponse.trades:type_name -> grpc.tradeapi.v1.marketdata.Trade
	16, // 6: grpc.tradeapi.v1.marketdata.SubscribeQuoteResponse.quote:type_name -> grpc.tradeapi.v1.marketdata.Quote
	19, // 7: grpc.tradeapi.v1.marketdata.SubscribeQuoteResponse.error:type_name -> grpc.tradeapi.v1.marketdata.StreamError
	20, // 8: grpc.tradeapi.v1.marketdata.SubscribeOrderBookResponse.order_book:type_name -> grpc.tradeapi.v1.marketdata.StreamOrderBook
	27, // 9: grpc.tradeapi.v1.marketdata.Bar.timestamp:type_name -> google.protobuf.Timestamp
	28, // 10: grpc.tradeapi.v1.marketdata.Bar.open:type_name -> google.type.Decimal
	28, // 11: grpc.tradeapi.v1.marketdata.Bar.high:type_name -> google.type.Decimal
	28, // 12: grpc.tradeapi.v1.marketdata.Bar.low:type_name -> google.type.Decimal
	28, // 13: grpc.tradeapi.v1.marketdata.Bar.close:type_name -> google.type.Decimal
	28, // 14: grpc.tradeapi.v1.marketdata.Bar.volume:type_name -> google.type.Decimal
	27, // 15: grpc.tradeapi.v1.marketdata.Quote.timestamp:type_name -> google.protobuf.Timestamp
	28, // 16: grpc.tradeapi.v1.marketdata.Quote.ask:type_name -> google.type.Decimal
	28, // 17: grpc.tradeapi.v1.marketdata.Quote.ask_size:type_name -> google.type.Decimal
	28, // 18: grpc.tradeapi.v1.marketdata.Quote.bid:type_name -> google.type.Decimal
	28, // 19: grpc.tradeapi.v1.marketdata.Quote.bid_size:type_name -> google.type.Decimal
	28, // 20: grpc.tradeapi.v1.marketdata.Quote.last:type_name -> google.type.Decimal
	28, // 21: grpc.tradeapi.v1.marketdata.Quote.last_size:type_name -> google.type.Decimal
	28, // 22: grpc.tradeapi.v1.marketdata.Quote.volume:type_name -> google.type.Decimal
	28, // 23: grpc.tradeapi.v1.marketdata.Quote.turnover:type_name -> google.type.Decimal
	28, // 24: grpc.tradeapi.v1.marketdata.Quote.open:type_name -> google.type.Decimal
	28, // 25: grpc.tradeapi.v1.marketdata.Quote.high:type_name -> google.type.Decimal
	28, // 26: grpc.tradeapi.v1.marketdata.Quote.low:type_name -> google.type.Decimal
	28, // 27: grpc.tradeapi.v1.marketdata.Quote.close:type_name -> google.type.Decimal
	28, // 28: grpc.tradeapi.v1.marketdata.Quote.change:type_name -> google.type.Decimal
	23, // 29: grpc.tradeapi.v1.marketdata.Quote.option:type_name -> grpc.tradeapi.v1.marketdata.Quote.Option
	24, // 30: grpc.tradeapi.v1.marketdata.OrderBook.rows:type_name -> grpc.tradeapi.v1.marketdata.OrderBook.Row
	27, // 31: grpc.tradeapi.v1.marketdata.Trade.timestamp:type_name -> google.protobuf.Timestamp
	28, // 32: grpc.tradeapi.v1.marketdata.Trade.price:type_name -> google.type.Decimal
	28, // 33: grpc.tradeapi.v1.marketdata.Trade.size:type_name -> google.type.Decimal
	25, // 34: grpc.tradeapi.v1.marketdata.StreamOrderBook.rows:type_name -> grpc.tradeapi.v1.marketdata.StreamOrderBook.Row
	18, // 35: grpc.tradeapi.v1.marketdata.SubscribeLatestTradesResponse.trades:type_name -> grpc.tradeapi.v1.marketdata.Trade
	28, // 36: grpc.tradeapi.v1.marketdata.Quote.Option.open_interest:type_name -> google.type.Decimal
	28, // 37: grpc.tradeapi.v1.marketdata.Quote.Option.implied_volatility:type_name -> google.type.Decimal
	28, // 38: grpc.tradeapi.v1.marketdata.Quote.Option.theoretical_price:type_name -> google.type.Decimal
	28, // 39: grpc.tradeapi.v1.marketdata.Quote.Option.delta:type_name -> google.type.Decimal
	28, // 40: grpc.tradeapi.v1.marketdata.Quote.Option.gamma:type_name -> google.type.Decimal
	28, // 41: grpc.tradeapi.v1.marketdata.Quote.Option.theta:type_name -> google.type.Decimal
	28, // 42: grpc.tradeapi.v1.marketdata.Quote.Option.vega:type_name -> google.type.Decimal
	28, // 43: grpc.tradeapi.v1.marketdata.Quote.Option.rho:type_name -> google.type.Decimal
	28, // 44: grpc.tradeapi.v1.marketdata.OrderBook.Row.price:type_name -> google.type.Decimal
	28, // 45: grpc.tradeapi.v1.marketdata.OrderBook.Row.sell_size:type_name -> google.type.Decimal
	28, // 46: grpc.tradeapi.v1.marketdata.OrderBook.Row.buy_size:type_name -> google.type.Decimal
	1,  // 47: grpc.tradeapi.v1.marketdata.OrderBook.Row.action:type_name -> grpc.tradeapi.v1.marketdata.OrderBook.Row.Action
	27, // 48: grpc.tradeapi.v1.marketdata.OrderBook.Row.timestamp:type_name -> google.protobuf.Timestamp
	28, // 49: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.price:type_name -> google.type.Decimal
	28, // 50: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.sell_size:type_name -> google.type.Decimal
	28, // 51: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.buy_size:type_name -> google.type.Decimal
	2,  // 52: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.action:type_name -> grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.Action
	27, // 53: grpc.tradeapi.v1.marketdata.StreamOrderBook.Row.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 54: grpc.tradeapi.v1.marketdata.MarketDataService.Bars:input_type -> grpc.tradeapi.v1.marketdata.BarsRequest
	5,  // 55: grpc.tradeapi.v1.marketdata.MarketDataService.LastQuote:input_type -> grpc.tradeapi.v1.marketdata.QuoteRequest
	7,  // 56: grpc.tradeapi.v1.marketdata.MarketDataService.OrderBook:input_type -> grpc.tradeapi.v1.marketdata.OrderBookRequest
	9,  // 57: grpc.tradeapi.v1.marketdata.MarketDataService.LatestTrades:input_type -> grpc.tradeapi.v1.marketdata.LatestTradesRequest
	11, // 58: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeQuote:input_type -> grpc.tradeapi.v1.marketdata.SubscribeQuoteRequest
	13, // 59: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeOrderBook:input_type -> grpc.tradeapi.v1.marketdata.SubscribeOrderBookRequest
	21, // 60: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeLatestTrades:input_type -> grpc.tradeapi.v1.marketdata.SubscribeLatestTradesRequest
	4,  // 61: grpc.tradeapi.v1.marketdata.MarketDataService.Bars:output_type -> grpc.tradeapi.v1.marketdata.BarsResponse
	6,  // 62: grpc.tradeapi.v1.marketdata.MarketDataService.LastQuote:output_type -> grpc.tradeapi.v1.marketdata.QuoteResponse
	8,  // 63: grpc.tradeapi.v1.marketdata.MarketDataService.OrderBook:output_type -> grpc.tradeapi.v1.marketdata.OrderBookResponse
	10, // 64: grpc.tradeapi.v1.marketdata.MarketDataService.LatestTrades:output_type -> grpc.tradeapi.v1.marketdata.LatestTradesResponse
	12, // 65: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeQuote:output_type -> grpc.tradeapi.v1.marketdata.SubscribeQuoteResponse
	14, // 66: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeOrderBook:output_type -> grpc.tradeapi.v1.marketdata.SubscribeOrderBookResponse
	22, // 67: grpc.tradeapi.v1.marketdata.MarketDataService.SubscribeLatestTrades:output_type -> grpc.tradeapi.v1.marketdata.SubscribeLatestTradesResponse
	61, // [61:68] is the sub-list for method output_type
	54, // [54:61] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_init() }
func file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_init() {
	if File_grpc_tradeapi_v1_marketdata_marketdata_service_proto != nil {
		return
	}
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[13].OneofWrappers = []any{
		(*Quote_Option_)(nil),
	}
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[21].OneofWrappers = []any{
		(*OrderBook_Row_SellSize)(nil),
		(*OrderBook_Row_BuySize)(nil),
	}
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes[22].OneofWrappers = []any{
		(*StreamOrderBook_Row_SellSize)(nil),
		(*StreamOrderBook_Row_BuySize)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDesc), len(file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_goTypes,
		DependencyIndexes: file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_depIdxs,
		EnumInfos:         file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_enumTypes,
		MessageInfos:      file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_msgTypes,
	}.Build()
	File_grpc_tradeapi_v1_marketdata_marketdata_service_proto = out.File
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_goTypes = nil
	file_grpc_tradeapi_v1_marketdata_marketdata_service_proto_depIdxs = nil
}
