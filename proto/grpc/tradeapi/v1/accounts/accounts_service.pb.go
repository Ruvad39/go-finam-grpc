// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.1
// source: grpc/tradeapi/v1/accounts/accounts_service.proto

package accounts_service

import (
	v1 "github.com/Ruvad39/go-finam-grpc/proto/grpc/tradeapi/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	interval "google.golang.org/genproto/googleapis/type/interval"
	money "google.golang.org/genproto/googleapis/type/money"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Категории транзакции.
type Transaction_TransactionCategory int32

const (
	// Прочее
	Transaction_OTHERS Transaction_TransactionCategory = 0
	// Ввод ДС
	Transaction_DEPOSIT Transaction_TransactionCategory = 1
	// Вывод ДС
	Transaction_WITHDRAW Transaction_TransactionCategory = 2
	// Доход
	Transaction_INCOME Transaction_TransactionCategory = 5
	// Комиссия
	Transaction_COMMISSION Transaction_TransactionCategory = 7
	// Налог
	Transaction_TAX Transaction_TransactionCategory = 8
	// Наследство
	Transaction_INHERITANCE Transaction_TransactionCategory = 9
	// Перевод ДС
	Transaction_TRANSFER Transaction_TransactionCategory = 11
	// Расторжение договора
	Transaction_CONTRACT_TERMINATION Transaction_TransactionCategory = 12
	// Расходы
	Transaction_OUTCOMES Transaction_TransactionCategory = 13
	// Штраф
	Transaction_FINE Transaction_TransactionCategory = 15
	// Займ
	Transaction_LOAN Transaction_TransactionCategory = 19
)

// Enum value maps for Transaction_TransactionCategory.
var (
	Transaction_TransactionCategory_name = map[int32]string{
		0:  "OTHERS",
		1:  "DEPOSIT",
		2:  "WITHDRAW",
		5:  "INCOME",
		7:  "COMMISSION",
		8:  "TAX",
		9:  "INHERITANCE",
		11: "TRANSFER",
		12: "CONTRACT_TERMINATION",
		13: "OUTCOMES",
		15: "FINE",
		19: "LOAN",
	}
	Transaction_TransactionCategory_value = map[string]int32{
		"OTHERS":               0,
		"DEPOSIT":              1,
		"WITHDRAW":             2,
		"INCOME":               5,
		"COMMISSION":           7,
		"TAX":                  8,
		"INHERITANCE":          9,
		"TRANSFER":             11,
		"CONTRACT_TERMINATION": 12,
		"OUTCOMES":             13,
		"FINE":                 15,
		"LOAN":                 19,
	}
)

func (x Transaction_TransactionCategory) Enum() *Transaction_TransactionCategory {
	p := new(Transaction_TransactionCategory)
	*p = x
	return p
}

func (x Transaction_TransactionCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_TransactionCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_enumTypes[0].Descriptor()
}

func (Transaction_TransactionCategory) Type() protoreflect.EnumType {
	return &file_grpc_tradeapi_v1_accounts_accounts_service_proto_enumTypes[0]
}

func (x Transaction_TransactionCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_TransactionCategory.Descriptor instead.
func (Transaction_TransactionCategory) EnumDescriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{10, 0}
}

// Запрос получения информации по конкретному аккаунту
type GetAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор аккаунта
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Информация о конкретном аккаунте
type GetAccountResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор аккаунта
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Тип аккаунта
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Статус аккаунта
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Доступные средства плюс стоимость открытых позиций
	Equity *decimal.Decimal `protobuf:"bytes,4,opt,name=equity,proto3" json:"equity,omitempty"`
	// Нереализованная прибыль
	UnrealizedProfit *decimal.Decimal `protobuf:"bytes,5,opt,name=unrealized_profit,json=unrealizedProfit,proto3" json:"unrealized_profit,omitempty"`
	// Позиции. Открытые, плюс теоретические (по неисполненным активным заявкам)
	Positions []*Position `protobuf:"bytes,6,rep,name=positions,proto3" json:"positions,omitempty"`
	// Сумма собственных денежных средств на счете, доступная для торговли. Не включает маржинальные средства.
	Cash []*money.Money `protobuf:"bytes,7,rep,name=cash,proto3" json:"cash,omitempty"`
	// Types that are valid to be assigned to Portfolio:
	//
	//	*GetAccountResponse_PortfolioMc
	//	*GetAccountResponse_PortfolioMct
	//	*GetAccountResponse_PortfolioForts
	Portfolio     isGetAccountResponse_Portfolio `protobuf_oneof:"portfolio"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetAccountResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetAccountResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAccountResponse) GetEquity() *decimal.Decimal {
	if x != nil {
		return x.Equity
	}
	return nil
}

func (x *GetAccountResponse) GetUnrealizedProfit() *decimal.Decimal {
	if x != nil {
		return x.UnrealizedProfit
	}
	return nil
}

func (x *GetAccountResponse) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetAccountResponse) GetCash() []*money.Money {
	if x != nil {
		return x.Cash
	}
	return nil
}

func (x *GetAccountResponse) GetPortfolio() isGetAccountResponse_Portfolio {
	if x != nil {
		return x.Portfolio
	}
	return nil
}

func (x *GetAccountResponse) GetPortfolioMc() *MC {
	if x != nil {
		if x, ok := x.Portfolio.(*GetAccountResponse_PortfolioMc); ok {
			return x.PortfolioMc
		}
	}
	return nil
}

func (x *GetAccountResponse) GetPortfolioMct() *MCT {
	if x != nil {
		if x, ok := x.Portfolio.(*GetAccountResponse_PortfolioMct); ok {
			return x.PortfolioMct
		}
	}
	return nil
}

func (x *GetAccountResponse) GetPortfolioForts() *FORTS {
	if x != nil {
		if x, ok := x.Portfolio.(*GetAccountResponse_PortfolioForts); ok {
			return x.PortfolioForts
		}
	}
	return nil
}

type isGetAccountResponse_Portfolio interface {
	isGetAccountResponse_Portfolio()
}

type GetAccountResponse_PortfolioMc struct {
	// Общий тип для счетов Московской Биржи. Включает в себя как единые, так и моно счета.
	PortfolioMc *MC `protobuf:"bytes,8,opt,name=portfolio_mc,json=portfolioMc,proto3,oneof"`
}

type GetAccountResponse_PortfolioMct struct {
	// Тип портфеля для счетов на американских рынках.
	PortfolioMct *MCT `protobuf:"bytes,9,opt,name=portfolio_mct,json=portfolioMct,proto3,oneof"`
}

type GetAccountResponse_PortfolioForts struct {
	// Тип портфеля для торговли на срочном рынке Московской Биржи.
	PortfolioForts *FORTS `protobuf:"bytes,10,opt,name=portfolio_forts,json=portfolioForts,proto3,oneof"`
}

func (*GetAccountResponse_PortfolioMc) isGetAccountResponse_Portfolio() {}

func (*GetAccountResponse_PortfolioMct) isGetAccountResponse_Portfolio() {}

func (*GetAccountResponse_PortfolioForts) isGetAccountResponse_Portfolio() {}

// Общий тип для счетов Московской Биржи. Включает в себя как единые, так и специализированные (моно) счета для разных секций биржи.
// Единый торговый счет (ЕТС): Позволяет торговать на нескольких рынках (фондовый, валютный. срочный, spb, иностранные бумаги, иностранные фьючерсы) с единой денежной позиции.
// Моно-счет фондового рынка MOEX: Изолированный счет для торговли акциями, облигациями и паями.
// Моно-счет валютного рынка MOEX: Изолированный счет для операций с валютными парами (например, CNYRUB_TOM).
type MC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Сумма собственных денежных средств на счете, доступная для торговли. Включает маржинальные средства.
	AvailableCash *decimal.Decimal `protobuf:"bytes,1,opt,name=available_cash,json=availableCash,proto3" json:"available_cash,omitempty"`
	// Начальная маржа
	InitialMargin *decimal.Decimal `protobuf:"bytes,2,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	// Минимальная маржа
	MaintenanceMargin *decimal.Decimal `protobuf:"bytes,3,opt,name=maintenance_margin,json=maintenanceMargin,proto3" json:"maintenance_margin,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MC) Reset() {
	*x = MC{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC) ProtoMessage() {}

func (x *MC) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC.ProtoReflect.Descriptor instead.
func (*MC) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{2}
}

func (x *MC) GetAvailableCash() *decimal.Decimal {
	if x != nil {
		return x.AvailableCash
	}
	return nil
}

func (x *MC) GetInitialMargin() *decimal.Decimal {
	if x != nil {
		return x.InitialMargin
	}
	return nil
}

func (x *MC) GetMaintenanceMargin() *decimal.Decimal {
	if x != nil {
		return x.MaintenanceMargin
	}
	return nil
}

// Тип портфеля для счетов на американских рынках.
// Предоставляет доступ к биржам США: NYSE, NASDAQ, CBOE, CME, сделки с американскими акциями, фьючерсами и опционами.
type MCT struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCT) Reset() {
	*x = MCT{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCT) ProtoMessage() {}

func (x *MCT) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCT.ProtoReflect.Descriptor instead.
func (*MCT) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{3}
}

// Тип портфеля для торговли на срочном рынке Московской Биржи.
// Предназначен для работы с производными финансовыми инструментами: фьючерсами и опционами.
type FORTS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Сумма собственных денежных средств на счете, доступная для торговли. Включает маржинальные средства.
	AvailableCash *decimal.Decimal `protobuf:"bytes,1,opt,name=available_cash,json=availableCash,proto3" json:"available_cash,omitempty"`
	// Минимальная маржа (необходимая сумма обеспечения под открытые позици)
	MoneyReserved *decimal.Decimal `protobuf:"bytes,2,opt,name=money_reserved,json=moneyReserved,proto3" json:"money_reserved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FORTS) Reset() {
	*x = FORTS{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FORTS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FORTS) ProtoMessage() {}

func (x *FORTS) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FORTS.ProtoReflect.Descriptor instead.
func (*FORTS) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{4}
}

func (x *FORTS) GetAvailableCash() *decimal.Decimal {
	if x != nil {
		return x.AvailableCash
	}
	return nil
}

func (x *FORTS) GetMoneyReserved() *decimal.Decimal {
	if x != nil {
		return x.MoneyReserved
	}
	return nil
}

// Запрос получения истории по сделкам
type TradesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор аккаунта
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Лимит количества сделок
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Начало и окончание запрашиваемого периода, Unix epoch time
	Interval      *interval.Interval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesRequest) Reset() {
	*x = TradesRequest{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesRequest) ProtoMessage() {}

func (x *TradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesRequest.ProtoReflect.Descriptor instead.
func (*TradesRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{5}
}

func (x *TradesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TradesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TradesRequest) GetInterval() *interval.Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// История по сделкам
type TradesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Сделки по аккаунту
	Trades        []*v1.AccountTrade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradesResponse) Reset() {
	*x = TradesResponse{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesResponse) ProtoMessage() {}

func (x *TradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesResponse.ProtoReflect.Descriptor instead.
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{6}
}

func (x *TradesResponse) GetTrades() []*v1.AccountTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Запрос получения списка транзакций
type TransactionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор аккаунта
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Лимит количества транзакций
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Начало и окончание запрашиваемого периода, Unix epoch time
	Interval      *interval.Interval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsRequest) Reset() {
	*x = TransactionsRequest{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRequest) ProtoMessage() {}

func (x *TransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRequest.ProtoReflect.Descriptor instead.
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TransactionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TransactionsRequest) GetInterval() *interval.Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// Список транзакций
type TransactionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Транзакции по аккаунту
	Transactions  []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsResponse) Reset() {
	*x = TransactionsResponse{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResponse) ProtoMessage() {}

func (x *TransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResponse.ProtoReflect.Descriptor instead.
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Информация о позиции
type Position struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Количество в шт., значение со знаком определяющее (long-short)
	Quantity *decimal.Decimal `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Средняя цена. Не заполняется для FORTS позиций
	AveragePrice *decimal.Decimal `protobuf:"bytes,3,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	// Текущая цена
	CurrentPrice *decimal.Decimal `protobuf:"bytes,4,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// Поддерживающее гарантийное обеспечение. Заполняется только для FORTS позиций
	MaintenanceMargin *decimal.Decimal `protobuf:"bytes,5,opt,name=maintenance_margin,json=maintenanceMargin,proto3" json:"maintenance_margin,omitempty"`
	// Прибыль или убыток за текущий день (PnL). Не заполняется для FORTS позиций
	DailyPnl *decimal.Decimal `protobuf:"bytes,6,opt,name=daily_pnl,json=dailyPnl,proto3" json:"daily_pnl,omitempty"`
	// Суммарная нереализованная прибыль или убыток (PnL) текущей позиции
	UnrealizedPnl *decimal.Decimal `protobuf:"bytes,7,opt,name=unrealized_pnl,json=unrealizedPnl,proto3" json:"unrealized_pnl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{9}
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetQuantity() *decimal.Decimal {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Position) GetAveragePrice() *decimal.Decimal {
	if x != nil {
		return x.AveragePrice
	}
	return nil
}

func (x *Position) GetCurrentPrice() *decimal.Decimal {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *Position) GetMaintenanceMargin() *decimal.Decimal {
	if x != nil {
		return x.MaintenanceMargin
	}
	return nil
}

func (x *Position) GetDailyPnl() *decimal.Decimal {
	if x != nil {
		return x.DailyPnl
	}
	return nil
}

func (x *Position) GetUnrealizedPnl() *decimal.Decimal {
	if x != nil {
		return x.UnrealizedPnl
	}
	return nil
}

// Информация о транзакции
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор транзакции
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Тип транзакции из TransactionCategory
	//
	// Deprecated: Marked as deprecated in grpc/tradeapi/v1/accounts/accounts_service.proto.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// Метка времени
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Символ инструмента
	Symbol string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Изменение в деньгах
	Change *money.Money `protobuf:"bytes,6,opt,name=change,proto3" json:"change,omitempty"`
	// Информация о сделке
	Trade *Transaction_Trade `protobuf:"bytes,7,opt,name=trade,proto3" json:"trade,omitempty"`
	// Категория транзакции из TransactionCategory.
	TransactionCategory Transaction_TransactionCategory `protobuf:"varint,8,opt,name=transaction_category,json=transactionCategory,proto3,enum=grpc.tradeapi.v1.accounts.Transaction_TransactionCategory" json:"transaction_category,omitempty"`
	// Наименование транзакции
	TransactionName string `protobuf:"bytes,9,opt,name=transaction_name,json=transactionName,proto3" json:"transaction_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{10}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Marked as deprecated in grpc/tradeapi/v1/accounts/accounts_service.proto.
func (x *Transaction) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Transaction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Transaction) GetChange() *money.Money {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Transaction) GetTrade() *Transaction_Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *Transaction) GetTransactionCategory() Transaction_TransactionCategory {
	if x != nil {
		return x.TransactionCategory
	}
	return Transaction_OTHERS
}

func (x *Transaction) GetTransactionName() string {
	if x != nil {
		return x.TransactionName
	}
	return ""
}

// Объект заполняется для торговых типов транзакций
type Transaction_Trade struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Количество в шт.
	Size *decimal.Decimal `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	// Цена сделки за штуку. Цена исполнения/Размер премии по опциону. Это цена заключения, значение берется из сделки.
	Price *decimal.Decimal `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// НКД. Заполнено если в сделке есть НКД
	AccruedInterest *decimal.Decimal `protobuf:"bytes,3,opt,name=accrued_interest,json=accruedInterest,proto3" json:"accrued_interest,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Transaction_Trade) Reset() {
	*x = Transaction_Trade{}
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction_Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Trade) ProtoMessage() {}

func (x *Transaction_Trade) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Trade.ProtoReflect.Descriptor instead.
func (*Transaction_Trade) Descriptor() ([]byte, []int) {
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Transaction_Trade) GetSize() *decimal.Decimal {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Transaction_Trade) GetPrice() *decimal.Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Transaction_Trade) GetAccruedInterest() *decimal.Decimal {
	if x != nil {
		return x.AccruedInterest
	}
	return nil
}

var File_grpc_tradeapi_v1_accounts_accounts_service_proto protoreflect.FileDescriptor

const file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDesc = "" +
	"\n" +
	"0grpc/tradeapi/v1/accounts/accounts_service.proto\x12\x19grpc.tradeapi.v1.accounts\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/type/decimal.proto\x1a\x1agoogle/type/interval.proto\x1a\x17google/type/money.proto\x1a\x1bgrpc/tradeapi/v1/side.proto\x1a\x1cgrpc/tradeapi/v1/trade.proto\"2\n" +
	"\x11GetAccountRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\"\xa0\x04\n" +
	"\x12GetAccountResponse\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12,\n" +
	"\x06equity\x18\x04 \x01(\v2\x14.google.type.DecimalR\x06equity\x12A\n" +
	"\x11unrealized_profit\x18\x05 \x01(\v2\x14.google.type.DecimalR\x10unrealizedProfit\x12A\n" +
	"\tpositions\x18\x06 \x03(\v2#.grpc.tradeapi.v1.accounts.PositionR\tpositions\x12&\n" +
	"\x04cash\x18\a \x03(\v2\x12.google.type.MoneyR\x04cash\x12B\n" +
	"\fportfolio_mc\x18\b \x01(\v2\x1d.grpc.tradeapi.v1.accounts.MCH\x00R\vportfolioMc\x12E\n" +
	"\rportfolio_mct\x18\t \x01(\v2\x1e.grpc.tradeapi.v1.accounts.MCTH\x00R\fportfolioMct\x12K\n" +
	"\x0fportfolio_forts\x18\n" +
	" \x01(\v2 .grpc.tradeapi.v1.accounts.FORTSH\x00R\x0eportfolioFortsB\v\n" +
	"\tportfolio\"\xc3\x01\n" +
	"\x02MC\x12;\n" +
	"\x0eavailable_cash\x18\x01 \x01(\v2\x14.google.type.DecimalR\ravailableCash\x12;\n" +
	"\x0einitial_margin\x18\x02 \x01(\v2\x14.google.type.DecimalR\rinitialMargin\x12C\n" +
	"\x12maintenance_margin\x18\x03 \x01(\v2\x14.google.type.DecimalR\x11maintenanceMargin\"\x05\n" +
	"\x03MCT\"\x81\x01\n" +
	"\x05FORTS\x12;\n" +
	"\x0eavailable_cash\x18\x01 \x01(\v2\x14.google.type.DecimalR\ravailableCash\x12;\n" +
	"\x0emoney_reserved\x18\x02 \x01(\v2\x14.google.type.DecimalR\rmoneyReserved\"w\n" +
	"\rTradesRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x121\n" +
	"\binterval\x18\x03 \x01(\v2\x15.google.type.IntervalR\binterval\"H\n" +
	"\x0eTradesResponse\x126\n" +
	"\x06trades\x18\x01 \x03(\v2\x1e.grpc.tradeapi.v1.AccountTradeR\x06trades\"}\n" +
	"\x13TransactionsRequest\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x121\n" +
	"\binterval\x18\x03 \x01(\v2\x15.google.type.IntervalR\binterval\"b\n" +
	"\x14TransactionsResponse\x12J\n" +
	"\ftransactions\x18\x01 \x03(\v2&.grpc.tradeapi.v1.accounts.TransactionR\ftransactions\"\xff\x02\n" +
	"\bPosition\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x120\n" +
	"\bquantity\x18\x02 \x01(\v2\x14.google.type.DecimalR\bquantity\x129\n" +
	"\raverage_price\x18\x03 \x01(\v2\x14.google.type.DecimalR\faveragePrice\x129\n" +
	"\rcurrent_price\x18\x04 \x01(\v2\x14.google.type.DecimalR\fcurrentPrice\x12C\n" +
	"\x12maintenance_margin\x18\x05 \x01(\v2\x14.google.type.DecimalR\x11maintenanceMargin\x121\n" +
	"\tdaily_pnl\x18\x06 \x01(\v2\x14.google.type.DecimalR\bdailyPnl\x12;\n" +
	"\x0eunrealized_pnl\x18\a \x01(\v2\x14.google.type.DecimalR\runrealizedPnl\"\xf9\x05\n" +
	"\vTransaction\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1e\n" +
	"\bcategory\x18\x02 \x01(\tB\x02\x18\x01R\bcategory\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x16\n" +
	"\x06symbol\x18\x05 \x01(\tR\x06symbol\x12*\n" +
	"\x06change\x18\x06 \x01(\v2\x12.google.type.MoneyR\x06change\x12B\n" +
	"\x05trade\x18\a \x01(\v2,.grpc.tradeapi.v1.accounts.Transaction.TradeR\x05trade\x12m\n" +
	"\x14transaction_category\x18\b \x01(\x0e2:.grpc.tradeapi.v1.accounts.Transaction.TransactionCategoryR\x13transactionCategory\x12)\n" +
	"\x10transaction_name\x18\t \x01(\tR\x0ftransactionName\x1a\x9e\x01\n" +
	"\x05Trade\x12(\n" +
	"\x04size\x18\x01 \x01(\v2\x14.google.type.DecimalR\x04size\x12*\n" +
	"\x05price\x18\x02 \x01(\v2\x14.google.type.DecimalR\x05price\x12?\n" +
	"\x10accrued_interest\x18\x03 \x01(\v2\x14.google.type.DecimalR\x0faccruedInterest\"\xbc\x01\n" +
	"\x13TransactionCategory\x12\n" +
	"\n" +
	"\x06OTHERS\x10\x00\x12\v\n" +
	"\aDEPOSIT\x10\x01\x12\f\n" +
	"\bWITHDRAW\x10\x02\x12\n" +
	"\n" +
	"\x06INCOME\x10\x05\x12\x0e\n" +
	"\n" +
	"COMMISSION\x10\a\x12\a\n" +
	"\x03TAX\x10\b\x12\x0f\n" +
	"\vINHERITANCE\x10\t\x12\f\n" +
	"\bTRANSFER\x10\v\x12\x18\n" +
	"\x14CONTRACT_TERMINATION\x10\f\x12\f\n" +
	"\bOUTCOMES\x10\r\x12\b\n" +
	"\x04FINE\x10\x0f\x12\b\n" +
	"\x04LOAN\x10\x132\xcc\x03\n" +
	"\x0fAccountsService\x12\x8c\x01\n" +
	"\n" +
	"GetAccount\x12,.grpc.tradeapi.v1.accounts.GetAccountRequest\x1a-.grpc.tradeapi.v1.accounts.GetAccountResponse\"!\x82\xd3\xe4\x93\x02\x1b\x12\x19/v1/accounts/{account_id}\x12\x87\x01\n" +
	"\x06Trades\x12(.grpc.tradeapi.v1.accounts.TradesRequest\x1a).grpc.tradeapi.v1.accounts.TradesResponse\"(\x82\xd3\xe4\x93\x02\"\x12 /v1/accounts/{account_id}/trades\x12\x9f\x01\n" +
	"\fTransactions\x12..grpc.tradeapi.v1.accounts.TransactionsRequest\x1a/.grpc.tradeapi.v1.accounts.TransactionsResponse\".\x82\xd3\xe4\x93\x02(\x12&/v1/accounts/{account_id}/transactionsB*P\x01Z&trade_api/v1/accounts/accounts_serviceb\x06proto3"

var (
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescOnce sync.Once
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescData []byte
)

func file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescGZIP() []byte {
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescOnce.Do(func() {
		file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDesc), len(file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDesc)))
	})
	return file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDescData
}

var file_grpc_tradeapi_v1_accounts_accounts_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_grpc_tradeapi_v1_accounts_accounts_service_proto_goTypes = []any{
	(Transaction_TransactionCategory)(0), // 0: grpc.tradeapi.v1.accounts.Transaction.TransactionCategory
	(*GetAccountRequest)(nil),            // 1: grpc.tradeapi.v1.accounts.GetAccountRequest
	(*GetAccountResponse)(nil),           // 2: grpc.tradeapi.v1.accounts.GetAccountResponse
	(*MC)(nil),                           // 3: grpc.tradeapi.v1.accounts.MC
	(*MCT)(nil),                          // 4: grpc.tradeapi.v1.accounts.MCT
	(*FORTS)(nil),                        // 5: grpc.tradeapi.v1.accounts.FORTS
	(*TradesRequest)(nil),                // 6: grpc.tradeapi.v1.accounts.TradesRequest
	(*TradesResponse)(nil),               // 7: grpc.tradeapi.v1.accounts.TradesResponse
	(*TransactionsRequest)(nil),          // 8: grpc.tradeapi.v1.accounts.TransactionsRequest
	(*TransactionsResponse)(nil),         // 9: grpc.tradeapi.v1.accounts.TransactionsResponse
	(*Position)(nil),                     // 10: grpc.tradeapi.v1.accounts.Position
	(*Transaction)(nil),                  // 11: grpc.tradeapi.v1.accounts.Transaction
	(*Transaction_Trade)(nil),            // 12: grpc.tradeapi.v1.accounts.Transaction.Trade
	(*decimal.Decimal)(nil),              // 13: google.type.Decimal
	(*money.Money)(nil),                  // 14: google.type.Money
	(*interval.Interval)(nil),            // 15: google.type.Interval
	(*v1.AccountTrade)(nil),              // 16: grpc.tradeapi.v1.AccountTrade
	(*timestamppb.Timestamp)(nil),        // 17: google.protobuf.Timestamp
}
var file_grpc_tradeapi_v1_accounts_accounts_service_proto_depIdxs = []int32{
	13, // 0: grpc.tradeapi.v1.accounts.GetAccountResponse.equity:type_name -> google.type.Decimal
	13, // 1: grpc.tradeapi.v1.accounts.GetAccountResponse.unrealized_profit:type_name -> google.type.Decimal
	10, // 2: grpc.tradeapi.v1.accounts.GetAccountResponse.positions:type_name -> grpc.tradeapi.v1.accounts.Position
	14, // 3: grpc.tradeapi.v1.accounts.GetAccountResponse.cash:type_name -> google.type.Money
	3,  // 4: grpc.tradeapi.v1.accounts.GetAccountResponse.portfolio_mc:type_name -> grpc.tradeapi.v1.accounts.MC
	4,  // 5: grpc.tradeapi.v1.accounts.GetAccountResponse.portfolio_mct:type_name -> grpc.tradeapi.v1.accounts.MCT
	5,  // 6: grpc.tradeapi.v1.accounts.GetAccountResponse.portfolio_forts:type_name -> grpc.tradeapi.v1.accounts.FORTS
	13, // 7: grpc.tradeapi.v1.accounts.MC.available_cash:type_name -> google.type.Decimal
	13, // 8: grpc.tradeapi.v1.accounts.MC.initial_margin:type_name -> google.type.Decimal
	13, // 9: grpc.tradeapi.v1.accounts.MC.maintenance_margin:type_name -> google.type.Decimal
	13, // 10: grpc.tradeapi.v1.accounts.FORTS.available_cash:type_name -> google.type.Decimal
	13, // 11: grpc.tradeapi.v1.accounts.FORTS.money_reserved:type_name -> google.type.Decimal
	15, // 12: grpc.tradeapi.v1.accounts.TradesRequest.interval:type_name -> google.type.Interval
	16, // 13: grpc.tradeapi.v1.accounts.TradesResponse.trades:type_name -> grpc.tradeapi.v1.AccountTrade
	15, // 14: grpc.tradeapi.v1.accounts.TransactionsRequest.interval:type_name -> google.type.Interval
	11, // 15: grpc.tradeapi.v1.accounts.TransactionsResponse.transactions:type_name -> grpc.tradeapi.v1.accounts.Transaction
	13, // 16: grpc.tradeapi.v1.accounts.Position.quantity:type_name -> google.type.Decimal
	13, // 17: grpc.tradeapi.v1.accounts.Position.average_price:type_name -> google.type.Decimal
	13, // 18: grpc.tradeapi.v1.accounts.Position.current_price:type_name -> google.type.Decimal
	13, // 19: grpc.tradeapi.v1.accounts.Position.maintenance_margin:type_name -> google.type.Decimal
	13, // 20: grpc.tradeapi.v1.accounts.Position.daily_pnl:type_name -> google.type.Decimal
	13, // 21: grpc.tradeapi.v1.accounts.Position.unrealized_pnl:type_name -> google.type.Decimal
	17, // 22: grpc.tradeapi.v1.accounts.Transaction.timestamp:type_name -> google.protobuf.Timestamp
	14, // 23: grpc.tradeapi.v1.accounts.Transaction.change:type_name -> google.type.Money
	12, // 24: grpc.tradeapi.v1.accounts.Transaction.trade:type_name -> grpc.tradeapi.v1.accounts.Transaction.Trade
	0,  // 25: grpc.tradeapi.v1.accounts.Transaction.transaction_category:type_name -> grpc.tradeapi.v1.accounts.Transaction.TransactionCategory
	13, // 26: grpc.tradeapi.v1.accounts.Transaction.Trade.size:type_name -> google.type.Decimal
	13, // 27: grpc.tradeapi.v1.accounts.Transaction.Trade.price:type_name -> google.type.Decimal
	13, // 28: grpc.tradeapi.v1.accounts.Transaction.Trade.accrued_interest:type_name -> google.type.Decimal
	1,  // 29: grpc.tradeapi.v1.accounts.AccountsService.GetAccount:input_type -> grpc.tradeapi.v1.accounts.GetAccountRequest
	6,  // 30: grpc.tradeapi.v1.accounts.AccountsService.Trades:input_type -> grpc.tradeapi.v1.accounts.TradesRequest
	8,  // 31: grpc.tradeapi.v1.accounts.AccountsService.Transactions:input_type -> grpc.tradeapi.v1.accounts.TransactionsRequest
	2,  // 32: grpc.tradeapi.v1.accounts.AccountsService.GetAccount:output_type -> grpc.tradeapi.v1.accounts.GetAccountResponse
	7,  // 33: grpc.tradeapi.v1.accounts.AccountsService.Trades:output_type -> grpc.tradeapi.v1.accounts.TradesResponse
	9,  // 34: grpc.tradeapi.v1.accounts.AccountsService.Transactions:output_type -> grpc.tradeapi.v1.accounts.TransactionsResponse
	32, // [32:35] is the sub-list for method output_type
	29, // [29:32] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_grpc_tradeapi_v1_accounts_accounts_service_proto_init() }
func file_grpc_tradeapi_v1_accounts_accounts_service_proto_init() {
	if File_grpc_tradeapi_v1_accounts_accounts_service_proto != nil {
		return
	}
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes[1].OneofWrappers = []any{
		(*GetAccountResponse_PortfolioMc)(nil),
		(*GetAccountResponse_PortfolioMct)(nil),
		(*GetAccountResponse_PortfolioForts)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDesc), len(file_grpc_tradeapi_v1_accounts_accounts_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_tradeapi_v1_accounts_accounts_service_proto_goTypes,
		DependencyIndexes: file_grpc_tradeapi_v1_accounts_accounts_service_proto_depIdxs,
		EnumInfos:         file_grpc_tradeapi_v1_accounts_accounts_service_proto_enumTypes,
		MessageInfos:      file_grpc_tradeapi_v1_accounts_accounts_service_proto_msgTypes,
	}.Build()
	File_grpc_tradeapi_v1_accounts_accounts_service_proto = out.File
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_goTypes = nil
	file_grpc_tradeapi_v1_accounts_accounts_service_proto_depIdxs = nil
}
